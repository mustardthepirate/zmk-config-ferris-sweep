// Copyright (c) 2022 The ZMK Contributors
// SPDX-License-Identifier: MIT

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

// Home row mods macro

#define HRML(k1,k2,k3,k4) &ht LSHFT k1  &ht LALT k2  &ht LCTRL k3  &ht LGUI k4
#define HRMR(k1,k2,k3,k4) &ht RGUI k1  &ht RCTRL k2  &ht RALT k3  &ht RSHFT k4

#define DEF 0
#define PUN 1
#define PRG 2
#define SYM 3
#define NAV 4
#define FUN 5
#define NUM 6
#define MED 7
#define TOP 8

/ {
    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <220>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <11 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
&kp Q             &kp W               &kp F           &kp P           &kp B              &kp J        &kp L           &kp U               &kp Y                  &kp SEMICOLON
&ht LEFT_SHIFT A  &lt 6 R             &lt 4 S         &lt 2 T         &kp G              &kp M        &lt 3 N         &lt 5 E             &lt 7 I                &ht RSHFT O
&kp Z             &ht LEFT_CONTROL X  &ht LEFT_GUI C  &ht LEFT_ALT D  &kp V              &kp K        &ht LEFT_ALT H  &ht LEFT_GUI COMMA  &ht RIGHT_CONTROL DOT  &kp FSLH
                                                      &kp ENTER       &lt 9 BACKSPACE    &lt 1 SPACE  &lt 8 TAB
            >;
        };

        Basic {
            bindings = <
&kp Q     &kp W       &trans     &trans      &trans    &trans              &kp C_SLEEP         &none          &trans          &kp C_POWER
&kt CAPS  &caps_word  &kp COLON  &kp ESCAPE  &trans    &kp RC(RS(ESCAPE))  &kp C_AC_CUT        &kp C_AC_COPY  &kp C_AC_PASTE  &caps_word
&trans    &trans      &trans     &kp EXCL    &trans    &trans              &kp K_CONTEXT_MENU  &sk RIGHT_GUI  &trans          &trans
                                 &trans      &trans    &trans              &trans
            >;
        };

        punctuation {
            bindings = <
&none  &none         &none          &none   &trans    &kp AMPS      &kp UNDERSCORE  &kp PIPE              &kp SQT            &kp RS(NUMBER_3)
&none  &kp ASTERISK  &kp AMPERSAND  &none   &trans    &kp HASH      &kp TILDE       &kp FSLH              &kp DOUBLE_QUOTES  &kp DOLLAR
&none  &none         &none          &none   &none     &kp ASTERISK  &kp MINUS       &kp NON_US_BACKSLASH  &kp GRAVE          &kp RA(NUMBER_4)
                                    &trans  &none     &trans        &trans
            >;
        };

        Programming {
            bindings = <
&kp HASH      &kp LS(COLON)  &kp LS(LT)    &kp LS(GT)    &kp LA(EQUAL)    &none   &none   &none  &none  &none
&kp LS(LBRC)  &kp LS(RBRC)   &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(AT)       &none   &none   &none  &none  &none
&kp MINUS     &kp LS(EXCL)   &kp LBKT      &kp RBKT      &kp BSPC         &none   &none   &none  &none  &none
                                           &trans        &none            &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&none  &none  &none  &none   &trans    &none     &mkp MB1   &kp PIPE              &mkp RCLK          &kp RS(NUMBER_3)
&none  &none  &none  &none   &trans    &kp HASH  &kp TILDE  &kp FSLH              &kp DOUBLE_QUOTES  &kp DOLLAR
&none  &none  &none  &none   &none     &none     &kp MINUS  &kp NON_US_BACKSLASH  &kp GRAVE          &kp RA(NUMBER_4)
                     &trans  &none     &trans    &trans
            >;
        };

        Directions {
            bindings = <
&kp HASH  &kp LS(COLON)  &kp LS(LT)      &kp PRINTSCREEN  &none       &none   &none              &none  &none         &none
&kp LEFT  &kp UP_ARROW   &kp DOWN_ARROW  &kp RIGHT        &none       &none   &kp RIGHT_CONTROL  &none  &kp LEFT_ALT  &kp RIGHT_SHIFT
&kp HOME  &kp PG_UP      &kp PAGE_DOWN   &kp END          &kp BSPC    &none   &none              &none  &none         &none
                                         &trans           &none       &trans  &trans
            >;
        };

        FunctionKeys {
            bindings = <
&none           &none  &none         &none      &trans    &none   &kp F9  &kp F10  &kp F11  &kp F12
&kp LEFT_SHIFT  &none  &kp LEFT_ALT  &kp RCTRL  &trans    &none   &kp F5  &kp F6   &kp F7   &kp F8
&none           &none  &none         &none      &none     &none   &kp F1  &kp F2   &kp F3   &kp F4
                                     &trans     &none     &trans  &trans
            >;
        };

        Numbers {
            bindings = <
&kp MINUS     &kp N7        &kp N8        &kp N9        &kp ASTERISK    &none   &none              &none         &none  &none
&kp PLUS      &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SLASH       &none   &kp RIGHT_CONTROL  &kp LEFT_ALT  &none  &kp RIGHT_SHIFT
&kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL       &none   &none              &kp LEFT_GUI  &none  &kp RIGHT_ALT
                                          &trans        &none           &trans  &trans
            >;
        };

        MediaControl {
            bindings = <
&bootloader  &trans  &bt BT_PRV  &bt BT_NXT  &trans    &trans  &trans        &none             &trans           &trans
&trans       &trans  &trans      &trans      &trans    &trans  &kp C_VOL_DN  &kp K_MUTE        &kp C_VOLUME_UP  &trans
&bt BT_CLR   &trans  &trans      &trans      &trans    &trans  &kp K_PREV    &kp K_PLAY_PAUSE  &kp K_NEXT       &trans
                                 &trans      &trans    &trans  &trans
            >;
        };

        OtherNumber {
            bindings = <
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &trans  &trans      &kp K_SLEEP  &trans  &kp K_POWER
&kp N6  &kp N7  &kp N8  &kp N9  &kp N0    &trans  &kp K_LOCK  &trans       &trans  &trans
&trans  &trans  &trans  &trans  &trans    &trans  &trans      &trans       &trans  &trans
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
